# vim: set ts=2 sw=2 tw=99 noet ft=python: 
import os

builder.SetBuildFolder('package')

bin_folder_path = os.path.join('addons', 'swiftly', 'extensions')
bin_folder = builder.AddFolder(bin_folder_path)

for cxx in MMSPlugin.all_targets:
  if cxx.target.arch == 'x86_64':
    if cxx.target.platform == 'windows':
      bin64_folder_path = os.path.join('addons', 'swiftly', 'extensions', 'win64')
      bin64_folder = builder.AddFolder(bin64_folder_path)
    elif cxx.target.platform == 'linux':
      bin64_folder_path = os.path.join('addons', 'swiftly', 'extensions', 'linuxsteamrt64')
      bin64_folder = builder.AddFolder(bin64_folder_path)
    elif cxx.target.platform == 'mac':
      bin64_folder_path = os.path.join('addons', 'swiftly', 'extensions', 'win64')
      bin64_folder = builder.AddFolder(bin64_folder_path)

pdb_list = []
for task in MMSPlugin.binaries:
  if task.target.arch == 'x86_64':
    builder.AddCopy(task.binary, bin64_folder)
  else:
    builder.AddCopy(task.binary, bin_folder)

  if task.debug:
    pdb_list.append(task.debug)

# Generate PDB info.
with open(os.path.join(builder.buildPath, 'pdblog.txt'), 'wt') as fp:
  for line in pdb_list:
    fp.write(line.path + '\n')

gamedata_folder = builder.AddFolder(os.path.join('addons', 'swiftly', 'gamedata', 'cs2', 'fakeranks'))
builder.AddCopy(os.path.join(builder.sourcePath, 'plugin_files', 'gamedata', 'cs2', 'fakeranks', 'signatures.json'), gamedata_folder)
