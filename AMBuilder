import os
import fnmatch
import json

MMSPlugin.plugin_name = 'fakeranks.ext'
MMSPlugin.plugin_alias = 'fakeranks.ext'

for sdk_target in MMSPlugin.sdk_targets:
    sdk = sdk_target.sdk
    cxx = sdk_target.cxx

    binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

    for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "src")):
        for _file in files:
            if fnmatch.fnmatch(_file, '*.cpp'):
                binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

    for root, dirs, files in os.walk(os.path.join(builder.sourcePath, 'vendor', 'swiftly-ext')):
        for _file in files:
            if fnmatch.fnmatch(_file, '*.cpp'):
                binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

    for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "vendor", "embedder", "src")):
        for _file in files:
            if fnmatch.fnmatch(_file, '*.cpp'):
                binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

    binary.sources.append(os.path.join(sdk['path'], 'entity2', 'entitysystem.cpp'))
    binary.sources.append(os.path.join(sdk['path'], 'entity2', 'entityidentity.cpp'))
    binary.sources.append(os.path.join(sdk['path'], 'entity2', 'entitykeyvalues.cpp'))
    binary.sources.append(os.path.join(sdk['path'], 'tier1', 'keyvalues3.cpp'))

    with open(os.path.join(builder.sourcePath, "vendor", "embedder", "libs", "links.json")) as f:
        embedder_linking = json.load(f)

    libs = embedder_linking["libraries"][binary.compiler.target.platform]
    incls = embedder_linking["includes"]
    for lib in libs:
        binary.compiler.postlink += [os.path.join(builder.sourcePath, "vendor", "embedder", "libs", lib)]
    for incl in incls:
        binary.compiler.cxxincludes += [os.path.join(builder.sourcePath, 'vendor', 'embedder', 'libs', incl)]

    if binary.compiler.target.platform == 'linux':
        binary.compiler.cxxflags += [
            "-Wno-invalid-offsetof",
            "-Wno-return-local-addr",
            "-Wno-overloaded-virtual",
            "-Wno-unknown-pragmas",
            "-Wno-non-virtual-dtor",
            "-Wno-attributes",
            "-Wno-array-bounds",
            "-Wno-int-to-pointer-cast",
            "-fexceptions",
        ]
        binary.compiler.cflags += [
            "-Wno-return-local-addr",
            "-Wno-unknown-pragmas",
            "-Wno-attributes",
            "-Wno-array-bounds",
            "-Wno-int-to-pointer-cast",
            "-fexceptions",
        ]
        binary.compiler.postlink += [
            "-lgnutls",
            "-lz",
            "-lpthread",
            "-lssl",
            "-lcrypto",
            "-lm",
            "-ldl",
            "-lreadline",
            "-lrt",
            "-lidn2",
            "-lpsl",
            "-lbrotlidec",
            "-lbacktrace",
            "-lstdc++",
            os.path.join(sdk['path'], 'lib', 'linux64', 'libsteam_api.so')
        ]
        binary.compiler.defines += [
            "_LINUX",
            "LINUX",
            "POSIX",
            "GNUC",
            "COMPILER_GCC",
            "PLATFORM_64BITS",
            "META_IS_SOURCE2",
            "_GLIBCXX_USE_CXX11_ABI=0",
        ]
    else:
        binary.compiler.cxxflags += [
            "/Zc:__cplusplus",
            "/Ox",
            "/Zo",
            "/Oy-",
            "/Z7",
            "/TP",
            "/MT",
            "/W3",
            "/Z7",
            "/EHsc"
        ]
        binary.compiler.postlink += [
      		"psapi.lib",
            "winmm.lib",
            "ws2_32.lib",
            "wldap32.lib",
            "advapi32.lib",
            "kernel32.lib",
            "comdlg32.lib",
            "crypt32.lib",
            "normaliz.lib",
            "wsock32.lib",
            "legacy_stdio_definitions.lib",
            "legacy_stdio_wide_specifiers.lib",
            "user32.lib",
            "gdi32.lib",
            "winspool.lib",
            "shell32.lib",
            "ole32.lib",
            "oleaut32.lib",
            "uuid.lib",
            "odbc32.lib",
            "odbccp32.lib",
            "msvcrt.lib",
            os.path.join(sdk['path'], 'lib', 'public', 'win64', 'steam_api64.lib')
        ]
        binary.compiler.defines += [
            "COMPILER_MSVC",
            "COMPILER_MSVC64",
            "WIN32",
            "_WIN32",
            "WINDOWS",
            "_WINDOWS",
            "CRT_SECURE_NO_WARNINGS",
            "_CRT_SECURE_NO_WARNINGS",
            "CRT_SECURE_NO_DEPRECATE",
            "_CRT_SECURE_NO_DEPRECATE",
            "CRT_NONSTDC_NO_DEPRECATE",
            "_CRT_NONSTDC_NO_DEPRECATE",
            "_MBCS",
            "META_IS_SOURCE2",
            "X64BITS",
            "PLATFORM_64BITS",
            "NDEBUG"
        ]

    binary.compiler.defines += [
        "HAVE_STRUCT_TIMESPEC",
        "BUILDING",
    ]

    if os.getenv("VERSION") != None:
        binary.compiler.defines += [
            "VERSION=\"" + os.getenv("VERSION") + "\""
        ]

    binary.compiler.cxxincludes += [
        os.path.join(builder.sourcePath, 'vendor'),
        os.path.join(builder.sourcePath, 'vendor', 'embedder', 'src'),

        os.path.join(builder.sourcePath, 'vendor', 'swiftly-ext', 'hooks'),
        os.path.join(builder.sourcePath, 'vendor', 'swiftly-ext', 'hooks', 'dynohook'),

        os.path.join(sdk['path']),
        os.path.join(sdk['path'], 'public'),
        os.path.join(sdk['path'], 'public', 'entity2'),
        os.path.join(sdk['path'], 'game', 'server'),
        os.path.join(sdk['path'], 'game', 'shared'),
        os.path.join(sdk['path'], 'common'),
        os.path.join(sdk['path'], 'public', 'engine'),
        os.path.join(sdk['path'], 'public', 'mathlib'),
        os.path.join(sdk['path'], 'public', 'tier0'),
        os.path.join(sdk['path'], 'public', 'tier1'),
        os.path.join(sdk['path'], 'public', 'mathlib'),
        os.path.join(sdk['path'], 'public', 'game', 'server'),
        os.path.join('alliedmodders', 'metamod', 'core'),
        os.path.join('alliedmodders', 'metamod', 'core', 'sourcehook')
    ]

    protoc_builder = builder.tools.Protoc(protoc = sdk_target.protoc, sources = [
        os.path.join(sdk['path'], 'common', 'network_connection.proto'),
        os.path.join(sdk['path'], 'common', 'networkbasetypes.proto'),
    ])
    protoc_builder.protoc.includes += [
        os.path.join(sdk['path'], 'gcsdk'),
        os.path.join(sdk['path'], 'common'),
        os.path.join(sdk['path'], 'game', 'shared'),
    ]

    binary.custom = [protoc_builder]

    nodes = builder.Add(binary)
    MMSPlugin.binaries += [nodes]
